(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{366:function(e,t,r){"use strict";r.r(t);var a=r(7),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("ul",[t("li",[t("a",{attrs:{href:"https://shenshuai89.github.io//2019/07/16/node%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E4%B8%80/",target:"_blank",rel:"noopener noreferrer"}},[e._v("第一篇：node基础特性介绍，并且启动一个服务"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://shenshuai89.github.io//2019/07/20/node%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E4%BA%8C/",target:"_blank",rel:"noopener noreferrer"}},[e._v("第二篇：node的npm包管理和上传文件操作"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://shenshuai89.github.io//2019/07/26/node%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E4%B8%89/",target:"_blank",rel:"noopener noreferrer"}},[e._v("第三篇：node的express框架"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://shenshuai89.github.io//2019/07/30/node%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%9B%9B/",target:"_blank",rel:"noopener noreferrer"}},[e._v("第四篇：node的koa2框架"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://shenshuai89.github.io//2019/08/03/node%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E4%BA%94/",target:"_blank",rel:"noopener noreferrer"}},[e._v("第五篇：node开发使用的数据库"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://shenshuai89.github.io//2019/08/10/node%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%85%AD/",target:"_blank",rel:"noopener noreferrer"}},[e._v("第六篇：node的cookie和session以及websocket使用"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"node的特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node的特性"}},[e._v("#")]),e._v(" node的特性")]),e._v(" "),t("p",[e._v("Node.js是一个让JavaScript运行在服务器端的开发平台，它让JavaScript的触角伸到了服务器端，可以与PHP、JSP、Python、Ruby平起平坐。运行在JavaScript引擎上（V8）。关于谷歌的V8引擎详细解读"),t("a",{attrs:{href:"https://www.jianshu.com/p/47afd0ac17fd",target:"_blank",rel:"noopener noreferrer"}},[e._v("V8"),t("OutboundLink")],1),e._v("。\nV8引擎的优点：")]),e._v(" "),t("ul",[t("li",[e._v("异步IO")]),e._v(" "),t("li",[e._v("性能足够好")]),e._v(" "),t("li",[e._v("拥有闭包特性，比C中的回调函数好用\nNode.js跳过了Apache、Naginx、IIS等HTTP服务器，它自己不用建设在任何服务器软件之上，nodeJs没有web容器。")])]),e._v(" "),t("p",[e._v("node的三大特性单线程、非阻塞IO、事件驱动")]),e._v(" "),t("h3",{attrs:{id:"单线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单线程"}},[e._v("#")]),e._v(" 单线程")]),e._v(" "),t("p",[e._v("node中"),t("a",{attrs:{href:"http://www.imooc.com/article/290632?block_id=tuijian_wz",target:"_blank",rel:"noopener noreferrer"}},[e._v("进程和线程的区别"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("线程是操作系统能够进行运算调度的最小单位，首先我们要清楚线程是隶属于进程的，被包含于进程之中。一个线程只能隶属于一个进程，但是一个进程是可以拥有多个线程的。")])]),e._v(" "),t("p",[e._v("node单线程是一个进程只开一个线程。单线程的程序按照顺序执行，前一个执行完，后一个才执行。当程序有耗时操作时，会使用事件回调异步操作。")]),e._v(" "),t("p",[e._v("在Java、PHP或者.net等服务器端语言中，会为每一个客户端连接创建一个新的线程。而每个线程需要耗费大约2MB内存。也就是说，理论上，一个8GB内存的服务器可以同时连接的最大用户数为4000个左右。要让Web应用程序支持更多的用户，就需要增加服务器的数量，而Web应用程序的硬件成本当然就上升了。")]),e._v(" "),t("p",[e._v("Node.js不为每个客户连接创建一个新的线程，而仅仅**使用一个线程。当有用户连接了，就触发一个内部事件，通过非阻塞I/O、事件驱动机制，让Node.js程序宏观上也是并行的。**使用Node.js，一个8GB内存的服务器，可以同时处理超过4万用户的连接。")]),e._v(" "),t("ul",[t("li",[e._v("坏处，是一个用户造成了线程的崩溃，整个服务都崩溃。*")])]),e._v(" "),t("h3",{attrs:{id:"非阻塞i-o"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞i-o"}},[e._v("#")]),e._v(" 非阻塞I/O")]),e._v(" "),t("p",[e._v("在传统的单线程处理机制中，在执行访问数据库或读写文件时（进行I/O），整个线程都将暂停下来。I/O阻塞代码的执行，极大地降低了程序的执行效率。")]),e._v(" "),t("p",[e._v("Node.js采用了非阻塞型I/O机制，因此在执行文件数据操作时，将立即转而执行其后面的其他计算程序。把I/O处理的结果放在回调函数中，从而提高了程序的执行效率。当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。"),t("strong",[e._v("为了处理异步I/O，线程必须有事件循环")]),e._v("，不断的检查有没有未处理的事件，依次予以处理。")]),e._v(" "),t("p",[e._v("阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。")]),e._v(" "),t("h3",{attrs:{id:"事件驱动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动"}},[e._v("#")]),e._v(" 事件驱动")]),e._v(" "),t("p",[e._v("在Node中，客户端请求建立连接，提交数据等行为，会触发相应的事件。在Node中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数的中途，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。")]),e._v(" "),t("p",[e._v("Node.js底层是C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度。用一个线程，担负起了处理非常多的任务的使命。")]),e._v(" "),t("p",[t("strong",[e._v("适合开发的类型")]),e._v("\n程序需要处理大量并发的I/O，向客户端发出响应前，应用程序内部并不需要非常复杂的处理计算，Node.js非常适合。Node.js也非常适合与web socket配合，开发长连接的实时交互应用程序。\n比如：\n● 用户表单收集\n● 考试系统\n● 聊天室\n● 图文直播\n● 提供JSON的API")]),e._v(" "),t("h2",{attrs:{id:"node启动一个服务器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node启动一个服务器"}},[e._v("#")]),e._v(" node启动一个服务器")]),e._v(" "),t("h2",{attrs:{id:"node的常用模块介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node的常用模块介绍"}},[e._v("#")]),e._v(" node的常用模块介绍")]),e._v(" "),t("h3",{attrs:{id:"http模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http模块"}},[e._v("#")]),e._v(" http模块")]),e._v(" "),t("h3",{attrs:{id:"url模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#url模块"}},[e._v("#")]),e._v(" url模块")]),e._v(" "),t("h3",{attrs:{id:"fs模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fs模块"}},[e._v("#")]),e._v(" fs模块")])])}),[],!1,null,null,null);t.default=n.exports}}]);