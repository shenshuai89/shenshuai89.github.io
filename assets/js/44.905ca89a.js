(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{355:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("ul",[t("li",[t("a",{attrs:{href:"http://www.shenshuai.me/2019/06/18/vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E4%B8%80%E6%96%B9%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE/",target:"_blank",rel:"noopener noreferrer"}},[s._v("第一篇：vue基础介绍，数据绑定(computed+watch)"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"http://www.shenshuai.me/2019/06/20/vue%E6%A0%B7%E5%BC%8Fclass%E5%92%8Cstyle",target:"_blank",rel:"noopener noreferrer"}},[s._v("第二篇：vue样式class和style"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"http://www.shenshuai.me/2019/06/22/vue%E7%BB%84%E4%BB%B6%E5%8F%8A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"}},[s._v("第三篇：vue组件及生命周期"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"http://www.shenshuai.me/2019/06/24/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/",target:"_blank",rel:"noopener noreferrer"}},[s._v("第四篇：vue父子组件之间的数据传递"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"http://www.shenshuai.me/2019/06/26/vue%E5%8A%A8%E7%94%BB%E4%B8%8E%E8%BF%87%E6%B8%A1/",target:"_blank",rel:"noopener noreferrer"}},[s._v("第五篇：vue动画与过渡"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"http://www.shenshuai.me/2019/06/28/vue-router%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"}},[s._v("第六篇：vue-router路由的使用"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"http://www.shenshuai.me/2019/06/30/vuex%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/",target:"_blank",rel:"noopener noreferrer"}},[s._v("第七篇：vuex数据管理"),t("OutboundLink")],1)])]),s._v(" "),t("h2",{attrs:{id:"vue-router路由基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-router路由基础"}},[s._v("#")]),s._v(" Vue-router路由基础")]),s._v(" "),t("p",[s._v("问：路由是个什么东西？\n答：路由是一个根据不同指令，进入到不同(道路)的控制中心。就像是家庭中安装的路由器，可以将每一台连接路由器的电脑分配一个不同的局域网IP。路由就像水管管道，进行筛选。\nvue中的路由作用：在构建单页面应用中，用于切换不同的页面组件。通过匹配不同的url地址展示不同的内容和页面。实质上还是一个单页应用，页面切换不会发送服务端请求(主要指页面DOM请求)。包含的主要功能有：")]),s._v(" "),t("ul",[t("li",[s._v("嵌套的路由/视图表")]),s._v(" "),t("li",[s._v("模块化的、基于组件的路由配置")]),s._v(" "),t("li",[s._v("路由参数、查询、通配符")]),s._v(" "),t("li",[s._v("基于 Vue.js 过渡系统的视图过渡效果")]),s._v(" "),t("li",[s._v("细粒度的导航控制")]),s._v(" "),t("li",[s._v("带有自动激活的 CSS class 的链接")]),s._v(" "),t("li",[s._v("HTML5 历史模式或 hash 模式，在 IE9 中自动降级")]),s._v(" "),t("li",[s._v("自定义的滚动条行为")])]),s._v(" "),t("h3",{attrs:{id:"单页面路由的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单页面路由的优缺点"}},[s._v("#")]),s._v(" 单页面路由的优缺点")]),s._v(" "),t("p",[s._v("**优点：**体验好，不需要每次从服务器获取全部，快速展现给用户；")]),s._v(" "),t("p",[s._v("**缺点：**不利于SEO；使用浏览器的前进，后退键的时候会重新发送请求，没有合理的利用缓存；单页面无法记住之前滚动的位置，无法在前进和后退的时候记住滚动的位置。")]),s._v(" "),t("h3",{attrs:{id:"vue-router跳转核心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-router跳转核心"}},[s._v("#")]),s._v(" Vue-router跳转核心")]),s._v(" "),t("p",[s._v("主要是定义两个标签router-link和router-view，")]),s._v(" "),t("ul",[t("li",[s._v("router-link用来做导航，相当于html的a标签，点击后可以跳转。")]),s._v(" "),t("li",[s._v("router-view用来显示路由匹配到的组件")]),s._v(" "),t("li",[s._v('使用编程式的导航路由this.$router.push("/about")')])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<div>\n  <router-link to="/foo">Go to Foo</router-link>\n  <router-link to="/bar">Go to Bar</router-link>\n  <div @click="$router.push(\'/about\')">Go to About</div>\n  <router-view></router-view>\n</div>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"脚手架中vue-router的安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#脚手架中vue-router的安装"}},[s._v("#")]),s._v(" 脚手架中vue-router的安装")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\tnpm install --save vue-router\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在项目中创建一个router.js")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import Vue from "vue";\nimport Router from "vue-router";\nimport Home from "./components/Home.vue"\nVue.use(Router);\n\nexport default new Router({\n\troutes:[\n\t{\n\t\tpath:"/",\n\t\tname:"home",\n\t\tcomponent:Home\n\t}\n\t]\n})\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("然后可以在main.js中引用")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import router from \"./router.js\";\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app')\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"动态路由匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态路由匹配"}},[s._v("#")]),s._v(" 动态路由匹配")]),s._v(" "),t("p",[s._v("在项目开发中，经常会碰到一些固定格式的路径url地址，只有最后的地址不同。如\nhttps://www.xxx.com/user/xiaoming\nhttps://www.xxx.com/user/lilei\nhttps://www.xxx.com/user/xiaohua\nhttps://www.xxx.com/user/xiaoming/list/id2361\nhttps://www.xxx.com/user/xiaoming/list/id6512\n我们可以在 vue-router 的路由路径中使用“动态路径参数”来达到这个效果：\n对路径参数使用:标记。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({\n  routes: [\n    // 动态路径参数 以冒号开头\n    { path: '/user/:username', component: User }\n  ]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("当匹配到一个路由时，参数值会被设置到 this.$route.params，("),t("a",{attrs:{href:"#route"}},[s._v("关于route和router的区别可以查看")]),s._v(")可以在每个组件内使用。于是，我们可以更新 User 的模板，输出当前用户的 ID："+s._s(this.$route.username)+"\n路由中也可设置多段“路径参数”，对应的值都会设置到 $route.params 中。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[s._v("模式")]),s._v(" "),t("th",{staticStyle:{"text-align":"center"}},[s._v("匹配路径")]),s._v(" "),t("th",{staticStyle:{"text-align":"center"}},[s._v("$route.params")])])]),s._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("/user/:username")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("/user/evan")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("{ username: 'evan' }")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v("/user/:username/post/:post_id")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("/user/evan/post/123")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("{ username: 'evan', post_id: '123' }")])])])]),s._v(" "),t("p",[s._v("除了 $route.params 外，$route 对象还提供了其它有用的信息，")]),s._v(" "),t("ul",[t("li",[s._v("$route.query: 对于路径 /foo?user=1，则有 $route.query.user == 1，如果没有查询参数，则是个空对象。")]),s._v(" "),t("li",[s._v("$route.hash :当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串。")]),s._v(" "),t("li",[s._v("$route.name : 当前路由的名称，如果有的话,需要结合命名路由，给router的routes设置name。")])]),s._v(" "),t("h4",{attrs:{id:"页面响应路由参数的变化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页面响应路由参数的变化"}},[s._v("#")]),s._v(" 页面响应路由参数的变化")]),s._v(" "),t("p",[s._v("路由参数的变化，原组件实质上是被复用，因为两个路由渲染同个组件，复用比销毁重建更加高效。这样会造成原流程的生命周期created，mounted，destoryed等阶段不会被触发。\n复用组件时，想对路由参数的变化作出监听的话，有两种方式：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 方法一 导航守卫\nbeforeRouteUpdate(to, from, next){\n\tconsole.log("页面路由参数发生了变化");\n\tnext();\n}\n// 方法二  watch监听route值的变化\nwatch:{\n\t$route(to, from){\n\t// 对路由变化作出响应...\n\t\tconsole.log("页面路由参数发生了变化");\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h4",{attrs:{id:"捕获所有路由或-404-not-found-路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#捕获所有路由或-404-not-found-路由"}},[s._v("#")]),s._v(" 捕获所有路由或 404 Not found 路由")]),s._v(" "),t("p",[s._v("常规参数只会匹配被 / 分隔的 URL 片段中的字符。如果想匹配任意路径，我们要使用通配符 (*)：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    {\n      // 会匹配所有路径\n      path: '*'\n    }\n    {\n      // 会匹配以 `/user-` 开头的任意路径\n      path: '/user-*'\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("当使用通配符路由时，通常需要放置在最后。路由 { path: '*' } 通常用于设置客户端 404 错误。")]),s._v(" "),t("p",[s._v("使用通配符时，$route.params内会自动添加一个pathMatch的参数，该参数可以显示被通配符匹配到的部分。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 给出一个路由 { path: '/user-*' }\nthis.$router.push('/user-admin')\nthis.$route.params.pathMatch // 'admin'\n// 给出一个路由 { path: '*' }\nthis.$router.push('/non-existing')\nthis.$route.params.pathMatch // '/non-existing'\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"嵌套路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#嵌套路由"}},[s._v("#")]),s._v(" 嵌套路由")]),s._v(" "),t("p",[s._v("嵌套路由的使用场景是:一个主菜单下，经常会有一些小栏目的子菜单，这时候就需要设置子路由。\n如新闻，下面设有热门新闻和最近新闻。\n在页面设置子路由导航的代码")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<div id="app">\n    <ul>\n        <li><router-link to="/">home</router-link></li>\n        <li><router-link to="/news">news</router-link></li>\n        <ol>\n            <li><router-link to="/news/hot">hotNews</li>\n            <li><router-link to="/news/latest">latestNews</li>\n        </ol>\n        <li><router-link to="/info">info</router-link></li>\n    </ul>\n    <router-view><router-view>\n</div>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("配置router.js")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default new VueRouter({\n    mode: 'history',\n    base : __dirname,\n    routes:[\n          {path:'/', component:Home},\n          {path:'/news', component:News,\n          //在子路由的children中path不能设置/，否则会被当做跟路由渲染\n            children: [\n                {path: ' ', component:News},\n                {path: 'hot', component:Hot},\n                {path: 'latest', component:Latest}\n             ]},\n          {path:'/info', component:Info}\n     ]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h3",{attrs:{id:"命名路由和命名视图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名路由和命名视图"}},[s._v("#")]),s._v(" 命名路由和命名视图")]),s._v(" "),t("h4",{attrs:{id:"命名路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名路由"}},[s._v("#")]),s._v(" 命名路由")]),s._v(" "),t("p",[s._v("在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/user/:userId',\n      name: 'user',\n      component: User\n    }\n  ]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("要链接到一个命名路由，可以给 router-link 的 to 属性传一个对象：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"命名视图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名视图"}},[s._v("#")]),s._v(" 命名视图")]),s._v(" "),t("p",[s._v("有时想同级展示多个视图，如侧边栏，和内容区。就可以设置多个router-view，给每个router-view设置name，没有设置name的，默认值为default")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<router-view></router-view>\n<router-view name="a"></router-view>\n<router-view name="b"></router-view>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("一个视图使用一个组件渲染,多个视图就需要多个组件。确保正确使用 components 配置 (带上 s)：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/',\n      components: {\n        default: Foo,\n        a: Bar,\n        b: Baz\n      }\n    }\n  ]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h3",{attrs:{id:"路由组件传参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由组件传参"}},[s._v("#")]),s._v(" 路由组件传参")]),s._v(" "),t("p",[s._v("在组件中使用 $route 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。\n使用 props 将组件和路由解耦：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const User = {\n  props: ['id'],\n  template: '<div>User {{ id }}</div>'\n}\nconst Book = {\n  props: ['id'],\n  template: '<div>Book {{ id }}</div>'\n}\nconst Comp1 = {\n  props: ['id'],\n  template: '<div>B {{ id }}</div>'\n}\nconst Comp2 = {\n  props: ['id'],\n  template: '<div>C {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n  //  布尔模式，如果props设置为true，route.params被设置为组件的属性\n    { path: '/user/:id', component: User, props: true },\n\n    // 对于包含命名视图的路由，即有多个router-view，并且设置了name值，你必须分别为每个命名视图添加 `props` 选项：\n    // <router-view name=\"comp1\"></router-view>\n    // <router-view name=\"comp2\"></router-view>\n    {\n      path: '/book/:id',\n      components: { default: Book, comp1: Comp1,  comp2: Comp2 },\n      // Comp1组件可以获取到参数，Comp2组件获取不到参数\n      props: { default: true, comp1: true, comp2:false}\n    }\n  ]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br")])]),t("p",[t("a",{attrs:{href:"https://jsfiddle.net/shenshuai/kw4L3on7/",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例代码"),t("OutboundLink")],1)]),s._v(" "),t("h4",{attrs:{id:"布尔模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔模式"}},[s._v("#")]),s._v(" 布尔模式")]),s._v(" "),t("p",[s._v("如果props设置为true，route.params被设置为组件的属性")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("{ path: '/user/:id', component: User, props: true }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v('在User组件中设置props:["id"],页面中可以取到id的值')]),s._v(" "),t("h4",{attrs:{id:"对象模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象模式"}},[s._v("#")]),s._v(" 对象模式")]),s._v(" "),t("p",[s._v("props 是一个对象，它会被按原样设置为组件属性。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("{ path: '/news/:id', component: News, props: {newValue:false }},\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这样可以在页面中获取newValue的值")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('export default {\n    name:"news",\n    props:["id"],\n    created(){\n      console.log("object",this.$attrs.newValue);\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"编程式的导航"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编程式的导航"}},[s._v("#")]),s._v(" 编程式的导航")]),s._v(" "),t("p",[s._v("一般的常规操作是在html的标签中添加router-link标签创建定义导航链接，其实还可以把跳转的指令放到js中。放到js中控制路由跳转，属于编程式导航。")]),s._v(" "),t("ul",[t("li",[s._v("router.replace(location, onComplete?, onAbort?)")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[s._v("声明式")]),s._v(" "),t("th",{staticStyle:{"text-align":"center"}},[s._v("编程式")])])]),s._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[s._v('< router-link :to="...">')]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("router.push(...)")])])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$router.push(location)  //字符串\n\n$router.push({path:'home'})；  // 对象\n\n$router.push({name:'user',params:{userId:123}})；  // 命名的路由\n\n// 带查询参数，变成 /register?plan=private，获取this.$route.query.plan\n$router.push({path:'register',query:{plan:'private'}})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("blockquote",[t("p",[s._v("注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const userId = 123\n\nrouter.push({ name: 'user', params: { userId }})；    // -> /user/123\n\nrouter.push({ path: `/user/${userId}` }) ；     // -> /user/123\n\n// 这里的 params 不生效（注意这个例子）\nrouter.push({ path: '/user', params: { userId }}) ；   // -> /user\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("name ---\x3e params\npath ----\x3e query")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("注意： 如果目的地和当前路由相同，只有参数发生了改变 (比如从一个用户资料到另一个 /users/1 -> /users/2)，你需要使用 beforeRouteUpdate 来响应这个变化 (比如抓取用户信息)。")])])]),s._v(" "),t("ul",[t("li",[t("p",[s._v('router.replace(location, onComplete?, onAbort?)\n| 声明式 |\t编程式 |\n|:-----😐:-----😐\n| < router-link :to="..." replace>\t|router.replace(...)|\n跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟push的方法名一样 —— 替换掉当前的 history 记录。')])]),s._v(" "),t("li",[t("p",[s._v("router.go(n)\n这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 在浏览器记录中前进一步，等同于 history.forward()\nrouter.go(1)\n\n// 后退一步记录，等同于 history.back()\nrouter.go(-1)\n\n// 前进 3 步记录\nrouter.go(3)\n\n// 如果 history 记录不够用，那就默默地失败呗\nrouter.go(-100)\nrouter.go(100)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h3",{attrs:{id:"重定向-和-别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重定向-和-别名"}},[s._v("#")]),s._v(" 重定向 和 别名")]),s._v(" "),t("h4",{attrs:{id:"重定向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重定向"}},[s._v("#")]),s._v(" 重定向")]),s._v(" "),t("p",[s._v("重定向也是通过 routes 配置来完成，下面例子是从 /a 重定向到 /b：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: '/b' }\n  ]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("重定向的目标也可以是一个命名的路由：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: { name: 'foo' }}\n  ]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h4",{attrs:{id:"别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#别名"}},[s._v("#")]),s._v(" 别名")]),s._v(" "),t("p",[s._v("/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。"),t("strong",[s._v("相当于a组件有一个另外的名字b，url是/b的时候也访问a组件")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({\n  routes: [\n    { path: '/a', component: A, alias: '/b' }\n  ]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"路由的histroy模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由的histroy模式"}},[s._v("#")]),s._v(" 路由的histroy模式")]),s._v(" "),t("blockquote",[t("p",[s._v("vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。路由的 history 模式，这种模式充分利用 window.history.pushState API 来完成 URL 跳转而无须重新加载页面。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 http://oursite.com/user/id 就会返回 404\n"),t("strong",[s._v("如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。")])]),s._v(" "),t("h2",{attrs:{id:"vue-router进阶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-router进阶"}},[s._v("#")]),s._v(" Vue-router进阶")]),s._v(" "),t("h3",{attrs:{id:"过渡动效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过渡动效"}},[s._v("#")]),s._v(" 过渡动效")]),s._v(" "),t("p",[s._v("< router-view> 是基本的动态组件，所以我们可以用 < transition> 组件给它添加一些过渡效果：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<transition name="defineName">\n  <router-view></router-view>\n</transition>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"基于路由的动态过渡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于路由的动态过渡"}},[s._v("#")]),s._v(" 基于路由的动态过渡")]),s._v(" "),t("p",[s._v("还可以基于当前路由与目标路由的变化关系，动态设置过渡效果：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('\x3c!-- 使用动态的 transition name --\x3e\n<transition :name="transitionName">\n  <router-view></router-view>\n</transition>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 接着在父组件内\n// watch $route 决定使用哪种过渡\nwatch: {\n  '$route' (to, from) {\n    const toDepth = to.path.split('/').length\n    const fromDepth = from.path.split('/').length\n    this.transitionName = toDepth < fromDepth ? 'slide-right' : 'slide-left'\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"路由懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载"}},[s._v("#")]),s._v(" 路由懒加载")]),s._v(" "),t("ol",[t("li",[s._v("结合 Vue 的异步组件和 Webpack 的代码分割功能，实现路由组件的懒加载\n第一步：将异步组件定义为返回一个 Promise 的工厂函数")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const Foo = () => import('./Foo.vue')\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("第二步：在 Webpack 中，我们可以使用动态 import语法来定义代码分块点 (split point)：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({\n  routes: [\n    { path: '/foo', component: Foo }\n    //或者直接{ path: '/foo', component: () => import('./Foo.vue')}\n  ]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("把组件按组分块\n把某个路由下的所有组件都打包在同个异步块 (chunk) 中")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\nconst Bar = () => import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')\nconst Baz = () => import(/* webpackChunkName: \"group-foo\" */ './Baz.vue')\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"导航守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导航守卫"}},[s._v("#")]),s._v(" 导航守卫")]),s._v(" "),t("p",[s._v("vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。\n"),t("strong",[s._v("参数或查询的改变并不会触发进入/离开的导航守卫。你可以通过观察 $route 对象来应对这些变化，或使用 beforeRouteUpdate 的组件内守卫。")])]),s._v(" "),t("h4",{attrs:{id:"全局的守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局的守卫"}},[s._v("#")]),s._v(" 全局的守卫")]),s._v(" "),t("h5",{attrs:{id:"全局的前置守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局的前置守卫"}},[s._v("#")]),s._v(" 全局的前置守卫")]),s._v(" "),t("p",[s._v("守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 等待中。\n使用 router.beforeEach 注册一个全局前置守卫")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({ ... })\n\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("每个守卫方法接收三个参数：")]),s._v(" "),t("ul",[t("li",[s._v("to: Route: 即将要进入的目标 路由对象")]),s._v(" "),t("li",[s._v("from: Route: 当前导航正要离开的路由")]),s._v(" "),t("li",[s._v("next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。\n确保要调用 next 方法，否则钩子就不会被 resolved")])]),s._v(" "),t("h5",{attrs:{id:"全局的后置钩子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局的后置钩子"}},[s._v("#")]),s._v(" 全局的后置钩子")]),s._v(" "),t("p",[s._v("使用 router.afterEach 注册一个全局后置钩子。这个钩子和守卫不同，钩子"),t("strong",[s._v("不会接受 next 函数")]),s._v("也不会改变导航本身")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("router.afterEach((to, from) => {\n  // ...\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"路由独享的守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由独享的守卫"}},[s._v("#")]),s._v(" 路由独享的守卫")]),s._v(" "),t("p",[s._v("可以在路由配置上直接定义 beforeEnter")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h4",{attrs:{id:"组件内的守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件内的守卫"}},[s._v("#")]),s._v(" 组件内的守卫")]),s._v(" "),t("p",[s._v("路由组件内直接定义组件内导航守卫：\nbeforeRouteEnter\nbeforeRouteUpdate (2.2 新增)\nbeforeRouteLeave")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const Foo = {\n  template: `...`,\n  beforeRouteEnter (to, from, next) {\n    // 在渲染该组件的对应路由被 confirm 前调用\n    // 不！能！获取组件实例 `this`\n    // 因为当守卫执行前，组件实例还没被创建\n  },\n  beforeRouteUpdate (to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  },\n  beforeRouteLeave (to, from, next) {\n    // 导航离开该组件的对应路由时调用\n    // 可以访问组件实例 `this`\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("h3",{attrs:{id:"数据获取"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据获取"}},[s._v("#")]),s._v(" 数据获取")]),s._v(" "),t("p",[s._v("进入某个路由后，需要从服务器获取数据。例如，在渲染用户信息时，你需要从服务器获取用户的数据。我们可以通过两种方式来实现：")]),s._v(" "),t("ul",[t("li",[s._v("导航完成之后获取：先进页面，后加载数据。在数据获取期间显示“加载中”之类的指示。")]),s._v(" "),t("li",[s._v("导航完成之前获取：先加载数据，然后做路由页面跳转")])]),s._v(" "),t("h4",{attrs:{id:"导航完成后获取数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导航完成后获取数据"}},[s._v("#")]),s._v(" 导航完成后获取数据")]),s._v(" "),t("p",[s._v("当你使用这种方式时，我们会马上导航和渲染组件，然后在组件的 created 钩子中获取数据。这让我们有机会在数据获取期间展示一个 loading 状态，还可以在不同视图间展示不同的 loading 状态。\n假设我们有一个 Post 组件，需要基于 $route.params.id 获取文章数据：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<template>\n  <div class="post">\n    <div v-if="loading" class="loading">\n      Loading...\n    </div>\n\n    <div v-if="error" class="error">\n      {{ error }}\n    </div>\n\n    <div v-if="post" class="content">\n      <h2>{{ post.title }}</h2>\n      <p>{{ post.body }}</p>\n    </div>\n  </div>\n</template>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("data")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("loading")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("post")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("error")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("created")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 组件创建完后获取数据，")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时 data 已经被 observed 解析了")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fetchData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("watch")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果路由有变化，会再次执行该方法")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v("'$route'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fetchData'")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("methods")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fetchData")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("error "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("post "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("loading "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// replace getPost with your data fetching util / API wrapper")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPost")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$route"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("params"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" post")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("loading "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("error "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("post "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" post\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br")])]),t("h4",{attrs:{id:"先获取数据-后进行路由导航"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#先获取数据-后进行路由导航"}},[s._v("#")]),s._v(" 先获取数据，后进行路由导航")]),s._v(" "),t("p",[s._v("导航转入新的路由前获取数据。我们可以在接下来的组件的 beforeRouteEnter 守卫中获取数据，当数据获取成功后必须调用 next 方法。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default {\n  data () {\n    return {\n      post: null,\n      error: null\n    }\n  },\n  beforeRouteEnter (to, from, next) {\n    getPost(to.params.id, (err, post) => {\n      next(vm => vm.setData(err, post))\n    })\n  },\n  // 路由改变前，组件就已经渲染完了\n  // 逻辑稍稍不同\n  beforeRouteUpdate (to, from, next) {\n    this.post = null\n    getPost(to.params.id, (err, post) => {\n      this.setData(err, post)\n      next()\n    })\n  },\n  methods: {\n    setData (err, post) {\n      if (err) {\n        this.error = err.toString()\n      } else {\n        this.post = post\n      }\n    }\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])]),t("p",[s._v("在获取到数据之前，路由不发生跳转，会一直停留在当前导航界面中。\n因此建议在获取数据期间，显示一些进度条或者提示。如果数据获取失败或者用户等级权限不够，同样有必要展示一些全局的错误提醒。")]),s._v(" "),t("p",[s._v("从技术角度讲，两种方式都不错 —— 就看你想要的用户体验是哪种。")]),s._v(" "),t("h3",{attrs:{id:"滚动行为"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#滚动行为"}},[s._v("#")]),s._v(" 滚动行为")]),s._v(" "),t("p",[s._v("使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置。\nvue-router 能做到，它让你可以自定义路由切换时页面如何滚动。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意: 这个功能只在支持 history.pushState 的浏览器中可用\nvue-router实例提供了一个scrollBehavior的方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const router = new VueRouter({\n  routes: [...],\n  scrollBehavior (to, from, savedPosition) {\n    // return 期望滚动到哪个的位置\n  }\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("blockquote",[t("p",[s._v("scrollBehavior 方法接收 to 和 from 路由对象。第三个参数 savedPosition 当且仅当 popstate 导航 (通过浏览器的 前进/后退 按钮触发) 时才可用。")])]),s._v(" "),t("p",[s._v("这个方法返回滚动位置的对象信息：\n{ x: number, y: number }\n{ selector: string, offset? : { x: number, y: number }} (offset 只在 2.6.0+ 支持)\n如果返回是一个空对象，那么不会发生滚动。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//所有路由导航，简单地让页面滚动到顶部。\nscrollBehavior (to, from, savedPosition) {\n  return { x: 0, y: 0 }\n}\n//返回 savedPosition，在按下 后退/前进 按钮时，就会像浏览器的原生表现\nscrollBehavior (to, from, savedPosition) {\n  if (savedPosition) {\n    return savedPosition\n  } else {\n    return { x: 0, y: 0 }\n  }\n}\n//模拟“滚动到锚点”的行为\nscrollBehavior (to, from, savedPosition) {\n  if (to.hash) {\n    return {\n      selector: to.hash\n    }\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("h3",{attrs:{id:"vue-router总结-router和-route区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-router总结-router和-route区别"}},[s._v("#")]),s._v(" "),t("a",{attrs:{id:"route"}},[s._v("vue-router总结 $router和$route区别")])]),s._v(" "),t("blockquote",[t("p",[s._v("this.$router(整个工程项目对象)是VueRouter的实例方法，当导航到不同url，可以使用this.$router.push方法，这个方法则会向history里面添加一条记录，当点击浏览器回退按钮或者this.$router.back()就会回退之前的url。")])]),s._v(" "),t("blockquote",[t("p",[s._v("this.$route(当前页面对象)相当于当前激活的路由对象，包含当前url解析得到的数据，可以从对象里获取一些数据，如name,path等。\n1、$route对象")])]),s._v(" "),t("p",[s._v("$route对象表示当前的路由信息，包含了当前 URL 解析得到的信息。包含当前的路径，参数，query对象等。\n"),t("strong",[s._v("1.$route.path")]),s._v('\n字符串，对应当前路由的路径，总是解析为绝对路径，如 "/foo/bar"。\n'),t("strong",[s._v("2.$route.params")]),s._v("\n一个 key/value 对象，包含了 动态片段 和 全匹配片段，\n如果没有路由参数，就是一个空对象。\n"),t("strong",[s._v("3.$route.query")]),s._v("\n一个 key/value 对象，表示 URL 查询参数。\n例如，对于路径 /foo?user=1，则有 $route.query.user == 1，\n如果没有查询参数，则是个空对象。\n"),t("strong",[s._v("4.$route.hash")]),s._v("\n当前路由的 hash 值 (不带 #) ，如果没有 hash 值，则为空字符串。锚点\n"),t("strong",[s._v("5.$route.fullPath")]),s._v("\n完成解析后的 URL，包含查询参数和 hash 的完整路径。\n"),t("strong",[s._v("6.$route.matched")]),s._v("\n数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。\n"),t("strong",[s._v("7.$route.name    当前路径名字")]),s._v("\n**8.$route.meta  路由元信息")]),s._v(" "),t("p",[s._v("2、$router对象")]),s._v(" "),t("p",[s._v("vue router总结 $router和$route及router与 router与route区别")]),s._v(" "),t("p",[s._v("$router对象是全局路由的实例，是router构造方法的实例。")]),s._v(" "),t("p",[s._v("路由实例方法：$router.push()、$router.go()、$router.replace()等")])])}),[],!1,null,null,null);t.default=e.exports}}]);