(window.webpackJsonp=window.webpackJsonp||[]).push([[303],{619:function(t,a,s){"use strict";s.r(a);var r=s(7),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"rust-编程第一课"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rust-编程第一课"}},[t._v("#")]),t._v(" Rust 编程第一课")]),t._v(" "),a("blockquote",[a("p",[t._v("实战驱动，快速上手 Rust\n陈天  Tubi TV 研发副总裁")])]),t._v(" "),a("p",[t._v("你将获得")]),t._v(" "),a("ul",[a("li",[t._v("系统高效的 Rust 学习路径")]),t._v(" "),a("li",[t._v("攻克 Rust 编程十大难点")]),t._v(" "),a("li",[t._v("即学即练，Rust 四大项目实战")]),t._v(" "),a("li",[t._v("200+ 原理图，详解 Rust 设计理念")])]),t._v(" "),a("h3",{attrs:{id:"课程介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#课程介绍"}},[t._v("#")]),t._v(" 课程介绍")]),t._v(" "),a("p",[t._v("Rust 集表达力、高性能、内存安全于一身，在 1.0 版本发布后不久，口碑就一路高飞猛进，从 16 年起，连续 6 年成为 Stack Overflow 用户评选出来的最受喜爱的语言（2021/3/15 评选结果）。")]),t._v(" "),a("p",[t._v("近几年，国外很多厂商宣布用 Rust 重写自己的技术栈，国内也有用 Rust 重写后端中间件的趋势。在可预见的未来，Rust 或在大多数领域代替 C/C++，甚至 Java/Golang，成为开发者的主力语言。")]),t._v(" "),a("p",[t._v("但是，Rust 对初学者似乎并不友好，被公认难入门，学习曲线相当陡峭。")]),t._v(" "),a("p",[t._v("比如变量的所有权和生命周期，作为 Rust 的创新概念，是其他编程语言都未涉及的领域。除此之外，不同语言背景，学习也各有难点：")]),t._v(" "),a("p",[t._v("C 开发者，难点是类型系统和泛型编程；\nC++ 开发者，难点主要在类型系统；\nPython/Ruby/JavaScript 开发者，难点在并发处理、类型系统及泛型编程；\nGolang 开发者，难点在类型系统和泛型编程；\nJava 开发者，难点在异步处理和并发安全的理解上。\n该如何跨越这些门槛，不断攀登新高峰呢？")]),t._v(" "),a("p",[t._v("为此，我们邀请到 Rust 专家陈天老师，结合其十八年深度使用多种语言的经验，以先行者的身份输出学习心法，从新手命令行到项目落地，带你知识与实战两手抓，真正掌握 Rust 的概念本质和设计理念，把 Rust 引入你的技术栈。")]),t._v(" "),a("h3",{attrs:{id:"课程设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#课程设计"}},[t._v("#")]),t._v(" 课程设计")]),t._v(" "),a("h4",{attrs:{id:"整个专栏分为-5-个模块。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整个专栏分为-5-个模块。"}},[t._v("#")]),t._v(" 整个专栏分为 5 个模块。")]),t._v(" "),a("h4",{attrs:{id:"前置知识篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置知识篇"}},[t._v("#")]),t._v(" 前置知识篇")]),t._v(" "),a("p",[t._v("回顾软件开发的基础概念：堆、栈、函数、闭包、虚表、泛型、同步和异步等。这是学好任意一门编程语言都要吃透的概念，因为编程语言不过是这些概念的具体表述和载体。")]),t._v(" "),a("h4",{attrs:{id:"基础知识篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础知识篇"}},[t._v("#")]),t._v(" 基础知识篇")]),t._v(" "),a("p",[t._v("首先通过 get hands dirty 小项目周，感性体验 Rust 语言的魅力，然后回归理性，结合第一性原理，深入浅出地探讨 Rust 变量的所有权和生命周期，以及对比几种主流的内存管理方式。之后围绕所有权和生命周期，来讨论 Rust 的几大语言特性：函数式编程特性、类型系统、泛型编程以及错误处理。")]),t._v(" "),a("h4",{attrs:{id:"进阶篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进阶篇"}},[t._v("#")]),t._v(" 进阶篇")]),t._v(" "),a("p",[t._v("Pascal 之父，图灵奖得主尼古拉斯·沃斯有一个著名的公式：算法 + 数据结构 = 程序，想随心所欲地使用 Rust 为你的系统构建数据结构，深度掌握类型系统必不可少。")]),t._v(" "),a("p",[t._v("所以这个模块将重点介绍 trait、trait object、泛型、unsafe rust，最后还会讲到 FFI，让你用 Rust 为自己的主力语言在关键路径上提供更高的性能，或者引入 Rust 生态中特定的库。")]),t._v(" "),a("h4",{attrs:{id:"并发篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发篇"}},[t._v("#")]),t._v(" 并发篇")]),t._v(" "),a("p",[t._v("学会用最合适的工具解决最合适的问题很重要。这个模块将带你从底层的 atomics 一路向上，历经 Mutex、Semaphore、Channel，直至 actor model，探索不同的并发手段。你会深度了解到，其他语言中被奉为圭臬的并发手段，在 Rust 里，只不过是一种并发工具。")]),t._v(" "),a("h4",{attrs:{id:"实战篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战篇"}},[t._v("#")]),t._v(" 实战篇")]),t._v(" "),a("p",[t._v("单纯掌握语言特性，能应用这些特性写出解决一些小问题的代码，算是初窥门径，就像在游泳池里练习冲浪，想要真正把语言融会贯通，还要靠大风大浪中的磨炼。这个模块会带你学习如何把 Rust 应用在生产环境中，以及如何使用 Rust 的编程思想解决实际问题。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://pan.baidu.com/s/1rXgbjzq13YAP_t6afoSOEQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("资源下载"),a("OutboundLink")],1),t._v("提取码：http://dt1.8tupian.net/2/29369a214b200.pg1")])])}),[],!1,null,null,null);a.default=v.exports}}]);