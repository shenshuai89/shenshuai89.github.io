(window.webpackJsonp=window.webpackJsonp||[]).push([[242],{553:function(t,a,_){"use strict";_.r(a);var v=_(7),r=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"软件设计之美"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件设计之美"}},[t._v("#")]),t._v(" 软件设计之美")]),t._v(" "),a("blockquote",[a("p",[t._v("多一点设计，少一点问题\n郑晔  推文科技技术 VP，前火币网首席架构师")])]),t._v(" "),a("p",[t._v("你将获得")]),t._v(" "),a("ul",[a("li",[t._v("3 个步骤，理解优秀软件的设计")]),t._v(" "),a("li",[t._v("典型的软件设计思维误区及解析")]),t._v(" "),a("li",[t._v("设计软件必备的 4 大知识模块")]),t._v(" "),a("li",[t._v("30+ 案例，深入剖析软件设计本质")])]),t._v(" "),a("h3",{attrs:{id:"课程介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#课程介绍"}},[t._v("#")]),t._v(" 课程介绍")]),t._v(" "),a("p",[t._v("在开发软件的过程中，我们都遇到过这样的情况：")]),t._v(" "),a("p",[t._v("一直在增删改查，缺少大局观，闷头写代码，埋下了很多自己也不知道的坑；\n系统出现问题时，只能头疼医头，脚疼医脚，找不到引发问题的本质原因；\n为了一个小需求，要在无数的地方小心翼翼地做着各种微调，还被产品经理嫌弃改得慢；\n每次针对需求变更而开发的代码，都会导致无尽的 Bug，连那些本来还好的代码模块也逐渐腐坏变烂；\n把各种代码堆砌在一起，在出现 Bug 时，犹如“大家来找茬”一样在其中定位问题，脑壳痛。\n其实，出现这些问题，绝大多数都是因为一个原因——软件设计一开始没做好。软件设计的优劣在根本上决定了软件系统的质量。好的设计，可以让系统更容易修改和扩展，不好的设计，却会让人举步维艰。")]),t._v(" "),a("p",[t._v("尽管软件设计很重要，但是学习起来却很容易陷入困惑。比方说，学了那么多设计模式，发现能用上的却没有几个；领域驱动设计中的概念那么多，却不知道该从哪学起。其实我们困惑的，并不是这些知识本身，而是缺乏一个整体结构将它们贯穿起来。软件设计学习的难度，不在于一招一式，而在于融会贯通。")]),t._v(" "),a("p",[t._v("所以，郑晔老师会通过这门课程，给你讲解软件设计的核心思维，将纷繁复杂的软件设计知识融会贯通成一个整体的结构，帮助你建立起对软件设计的整体认知，切实帮助你提高软件开发能力。你会感受到软件设计之美，在日后的工作中不断寻求最佳的设计方案。")]),t._v(" "),a("h3",{attrs:{id:"课程设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#课程设计"}},[t._v("#")]),t._v(" 课程设计")]),t._v(" "),a("h4",{attrs:{id:"整个专栏分为-4-个模块。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整个专栏分为-4-个模块。"}},[t._v("#")]),t._v(" 整个专栏分为 4 个模块。")]),t._v(" "),a("h4",{attrs:{id:"核心一-课前必读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心一-课前必读"}},[t._v("#")]),t._v(" 核心一：课前必读")]),t._v(" "),a("ul",[a("li",[t._v("在正式开始软件设计的学习之前，我们会先梳理清楚软件设计的真正内涵与意义，与你谈谈影响软件设计的两个不可忽视的因素：分离关注点和可测试性。掌握这些内容会为你的软件设计学习之旅奠定一个良好的基础。")])]),t._v(" "),a("h4",{attrs:{id:"核心二-了解一个软件的设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心二-了解一个软件的设计"}},[t._v("#")]),t._v(" 核心二：了解一个软件的设计")]),t._v(" "),a("ul",[a("li",[t._v("教你一个“三步走”方法，让你无论是在新接触一个项目，或是想借鉴优秀实践的设计时，都有可以遵循的框架，快速抓到一个软件的设计精髓。同时，我们还会深入拆解三个最具代表性的开源项目，让你在案例中加深对知识的理解。")])]),t._v(" "),a("h4",{attrs:{id:"核心三-设计一个软件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心三-设计一个软件"}},[t._v("#")]),t._v(" 核心三：设计一个软件")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("给你讲解设计一个软件时，你需要掌握的核心知识：")]),t._v(" "),a("ul",[a("li",[t._v("程序设计语言：横跨语言学语言，让你不再局限于某一种语言，而是根据应用场景，择其善者而从之；")]),t._v(" "),a("li",[t._v("编程范式：选择了几个最主流的编程范式，包括结构化编程、面向对象和函数式编程，帮你建立起软件设计的根基；")]),t._v(" "),a("li",[t._v("设计原则与模式：给你介绍面向对象的主流设计原则，SOLID 原则。还会分享一些学习设计模式的心得，帮助你将设计模式的相关知识贯穿起来；")]),t._v(" "),a("li",[t._v("设计方法：分析 DDD 设计方法，这是当下完整、有效的应对复杂业务场景的设计方法，包括了从如何识别概念到如何建立模型。")])])]),t._v(" "),a("li",[a("p",[t._v("高级语言和低级语言之间如何互相转化？应用堆和栈内存有什么不同？多个进程之间如何通信？Linux 如何管理外设，又如何存放文件……这些重难点问题，一个都不会漏掉。")])])]),t._v(" "),a("h4",{attrs:{id:"核心四-巩固篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心四-巩固篇"}},[t._v("#")]),t._v(" 核心四：巩固篇")]),t._v(" "),a("ul",[a("li",[t._v("通过三个实战项目，分析如何设计一个程序库、如何构建一个可扩展的模型和如何对既有的项目做设计上的改进，将学到的软件知识融会贯通。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://pan.baidu.com/s/1vsNZ_mdjojZzlKhfyPyi5w",target:"_blank",rel:"noopener noreferrer"}},[t._v("资源下载"),a("OutboundLink")],1),t._v("提取码：http://dt3.8tupian.net/2/29369a146b200.pg1")])])}),[],!1,null,null,null);a.default=r.exports}}]);