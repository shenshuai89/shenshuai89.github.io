(window.webpackJsonp=window.webpackJsonp||[]).push([[486],{798:function(a,t,r){"use strict";r.r(t);var s=r(7),v=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"https://pan.baidu.com/s/1JRyCmU7R4NEwJ4_yLTesag",target:"_blank",rel:"noopener noreferrer"}},[a._v("资源下载"),t("OutboundLink")],1),a._v(" 提取码：http://dt1.8tupian.net/2/29369a315b200.pg1")]),a._v(" "),t("h2",{attrs:{id:"课程介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课程介绍"}},[a._v("#")]),a._v(" 课程介绍：")]),a._v(" "),t("p",[a._v("编译原理，操作系统，图形学它们在回答计算机领域三个基本问题：程序如何被编译成机器指令然后被执行（编译原理）、多个程序如何共享资源（操作系统）、人和机器如何交互（图形学）。")]),a._v(" "),t("h2",{attrs:{id:"课程亮点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课程亮点"}},[a._v("#")]),a._v(" 课程亮点")]),a._v(" "),t("ul",[t("li",[a._v("《编译原理》：通过分层架构设计，结合大量面向对象思想以及少量函数式编程思想，融合算法和设计模式，带你掌握编程技巧、架构思想、以及程序语言的原理。")]),a._v(" "),t("li",[a._v("《操作系统》：通过分析进程内部对CPU资源（线程）、内存、文件、用户的抽象，理解计算机工作的原理。")]),a._v(" "),t("li",[a._v("《图形学》：通过做一个射击游戏，渗透3D模型、世界描述、投影、渲染管道、光线追踪等核心概念，让你更深的理解人机交互，并能从事相关方面的工作。")])]),a._v(" "),t("h2",{attrs:{id:"课程目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课程目录"}},[a._v("#")]),a._v(" 课程目录")]),a._v(" "),t("h3",{attrs:{id:"第1章-学前导学-要有准备有目标的学"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第1章-学前导学-要有准备有目标的学"}},[a._v("#")]),a._v(" 第1章 学前导学(要有准备有目标的学)")]),a._v(" "),t("p",[a._v("介绍课程的主要内容、学习顺序；和学员对焦程序员的能力模型，课程希望达到的效果等。然后，讲师和同学同步课程使用的开发工具如intelij,vscode,mars4,mocha,gradle等。")]),a._v(" "),t("h3",{attrs:{id:"第2章-计算机理论引导-理解计算机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第2章-计算机理论引导-理解计算机"}},[a._v("#")]),a._v(" 第2章 计算机理论引导（理解计算机）")]),a._v(" "),t("p",[a._v("本章集中解决学习三大浪漫过程中的前置基础依赖。主要是理解计算机的模型，理解计算机是如何设计的？程序是什么？指令是怎么被CPU执行的？内存中的数据如何被找到并读入寄存器等。")]),a._v(" "),t("h3",{attrs:{id:"第3章-【-编译原理】概述-理解编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第3章-【-编译原理】概述-理解编译器"}},[a._v("#")]),a._v(" 第3章 【 编译原理】概述（理解编译器）")]),a._v(" "),t("p",[a._v("本章串讲编译器的主要流程，介绍编译器和自然语言翻译的差异性，以及对编译原理的课程提供一个整体介绍。")]),a._v(" "),t("h3",{attrs:{id:"第4章-【-编译原理】词法分析-实现一个词法分析器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第4章-【-编译原理】词法分析-实现一个词法分析器"}},[a._v("#")]),a._v(" 第4章 【 编译原理】词法分析（实现一个词法分析器）")]),a._v(" "),t("p",[a._v("本章介绍编译器词法分析部分的实现，讲解词法分析的流程，实现一个完整的词法分析器。帮助学员理解流、正则引擎、状态机等概念，理解基本的面向对象封装复用技巧。")]),a._v(" "),t("h3",{attrs:{id:"第5章-【-编译原理】语法分析-实现一个语法分析器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第5章-【-编译原理】语法分析-实现一个语法分析器"}},[a._v("#")]),a._v(" 第5章 【 编译原理】语法分析（实现一个语法分析器）")]),a._v(" "),t("p",[a._v("本章介绍语法分析的基本概念，如产生式、抽象语法树、递归向下方解析法等，并且在实战中帮助学员理解和处理更复杂的问题，如多级优先级表达式等。同时，向学员渗透跳跃结构——树和图的遍历算法以及相关理论知识。")]),a._v(" "),t("h3",{attrs:{id:"第6章-【-编译原理】语法制导翻译-实现中间语言翻译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第6章-【-编译原理】语法制导翻译-实现中间语言翻译器"}},[a._v("#")]),a._v(" 第6章 【 编译原理】语法制导翻译（实现中间语言翻译器）")]),a._v(" "),t("p",[a._v("本章介绍根据语法树进行翻译的基本方法和相关理论，并用这些理论讲TinyScript编译成中间语言。本章涉及语言层面最基本的问题，如符号表、作用域如何被实现？类型检查如何进行？另外，本章重点渗透树、图、哈希表等关键数据结构，相关算法；帮助学员重新review递归问题。")]),a._v(" "),t("h3",{attrs:{id:"第7章-【-编译原理】程序运行环境-实现一个虚拟机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第7章-【-编译原理】程序运行环境-实现一个虚拟机"}},[a._v("#")]),a._v(" 第7章 【 编译原理】程序运行环境（实现一个虚拟机）")]),a._v(" "),t("p",[a._v("本章介绍如何将中间语言翻译成机器指令，通过构造一个虚拟机执行机器指令。本章会看到堆栈的分配、程序的执行、指令的选择等等内容，和第二章的内容形成呼应，在学习操作系统之前加深对机器的理解。")]),a._v(" "),t("h3",{attrs:{id:"第8章-【-操作系统】概述-历史和核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第8章-【-操作系统】概述-历史和核心概念"}},[a._v("#")]),a._v(" 第8章 【 操作系统】概述（历史和核心概念）")]),a._v(" "),t("p",[a._v("本章介绍操作系统的历史，如unix是怎么被设计出来？mac和windows又是怎么回事？linux为什么叫linxu等。然后渗透一些基本的概念，如操作系统是连接硬件和软件的桥梁，内核如何被设计，多核的CPU如何管理，如何并发执行指令等。")]),a._v(" "),t("h3",{attrs:{id:"第9章-【-操作系统】进程和多线程-多线程算法全解和实战高并发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第9章-【-操作系统】进程和多线程-多线程算法全解和实战高并发"}},[a._v("#")]),a._v(" 第9章 【 操作系统】进程和多线程（多线程算法全解和实战高并发）")]),a._v(" "),t("p",[a._v("本章介绍进程如何被操作系统管理，线程如何在用户空间工作；然后介绍竞争问题，掌握处理竞争的算法：自旋锁、TAS、信号量、互斥量、监视器等等。基于信号量模型实现多线程同步IO模型服务器，并与Spring框架及node.js单线程同步I/O模型比较性能。")]),a._v(" "),t("h3",{attrs:{id:"第10章-【-操作系统】调度算法入门-理解任务调度的模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第10章-【-操作系统】调度算法入门-理解任务调度的模型"}},[a._v("#")]),a._v(" 第10章 【 操作系统】调度算法入门（理解任务调度的模型）")]),a._v(" "),t("p",[a._v("本章介绍进程如何被操作系统调度的，通过实现哲学家就餐问题引入，然后介绍各种基于时间片、优先级的调度模型；本章会重点渗透队列和优先级队列这两种数据结构。")]),a._v(" "),t("h3",{attrs:{id:"第11章-【操作系统】内存管理-内存分配回收全面解答"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第11章-【操作系统】内存管理-内存分配回收全面解答"}},[a._v("#")]),a._v(" 第11章 【操作系统】内存管理（内存分配回收全面解答）")]),a._v(" "),t("p",[a._v("本章介绍多种内存分配策略，重点会放在内存回收的策略上。通过理解内存分配、内存回收，让学员理解很多语言层面的回收策略，设计妥协以及深层次的考虑。同时向学员渗透链表、栈等数据结构的深入使用方式。")]),a._v(" "),t("h3",{attrs:{id:"第12章-【-操作系统】文件系统-底层数据结构设计与抽象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第12章-【-操作系统】文件系统-底层数据结构设计与抽象"}},[a._v("#")]),a._v(" 第12章 【 操作系统】文件系统（底层数据结构设计与抽象）")]),a._v(" "),t("p",[a._v("本章介绍文件系统设计和抽象的方法，这里有大量的思想和设计模式可以渗透。帮助学员理解如何从编程接口抽象的API，到高层的文件、目录结构，然后有如何被映射到中层的数据块、节点，最后如何到最底层的物理存储。")]),a._v(" "),t("h3",{attrs:{id:"第13章-【图形学】概要-小白学图形学第一步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第13章-【图形学】概要-小白学图形学第一步"}},[a._v("#")]),a._v(" 第13章 【图形学】概要（小白学图形学第一步）")]),a._v(" "),t("p",[a._v("本章介绍图形学历史、基本概念，以及涉及的各种各样知识，应用场景的概括。简单介绍3d模型、世界描述、光照等图形学重要的内容，以及他们被应用到电影、工业、医疗、可视化、游戏、电子等等广泛的领域。然后介绍课程的组织形式和学习方法。 .")]),a._v(" "),t("h3",{attrs:{id:"第14章-【图形学】-图形渲染流程和webgl初探-从helloworld逐渐深入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第14章-【图形学】-图形渲染流程和webgl初探-从helloworld逐渐深入"}},[a._v("#")]),a._v(" 第14章 【图形学】 图形渲染流程和WebGL初探（从helloworld逐渐深入）")]),a._v(" "),t("p",[a._v("本章介绍OpenGL标准、生态以及对webgl进行一个初探，写一个webgl的helloworld并了解图形渲染管道的流程。")]),a._v(" "),t("h3",{attrs:{id:"第15章-【图形学】glsl-多例子教你用着色器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第15章-【图形学】glsl-多例子教你用着色器"}},[a._v("#")]),a._v(" 第15章 【图形学】GLSL（多例子教你用着色器）")]),a._v(" "),t("p",[a._v("本章介绍OpenGL Shadering Language，从语法开始，通过多个实例逐渐渗透GLSL的用途。")]),a._v(" "),t("h3",{attrs:{id:"第16章-【图形学】光照和光线追踪-理解世界最核心的-光"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第16章-【图形学】光照和光线追踪-理解世界最核心的-光"}},[a._v("#")]),a._v(" 第16章 【图形学】光照和光线追踪（理解世界最核心的——光）")]),a._v(" "),t("p",[a._v("本章结合介绍webgl讲解如为场景增加光照，以此来增加场景的真实感。然后重点帮助同学理解图形学渲染的一个核心算法——光线追踪算法，并带领同学通过实际编程解决问题去理解这个算法。")]),a._v(" "),t("h3",{attrs:{id:"第17章-【图形学】游戏开发-一起实现一个射击类的3d游戏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第17章-【图形学】游戏开发-一起实现一个射击类的3d游戏"}},[a._v("#")]),a._v(" 第17章 【图形学】游戏开发（一起实现一个射击类的3D游戏）")]),a._v(" "),t("p",[a._v("本章通过和学员一起实现一个3D类的射击游戏，帮助学员巩固和提高对图形学的理解。在解决场景布置、视角转换、事件捕捉、碰撞检测、物理计算等等过程中，将之前学的理论知识逐渐融汇贯通。")])])}),[],!1,null,null,null);t.default=v.exports}}]);