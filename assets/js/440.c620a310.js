(window.webpackJsonp=window.webpackJsonp||[]).push([[440],{753:function(a,v,t){"use strict";t.r(v);var s=t(7),_=Object(s.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("p",[v("a",{attrs:{href:"https://pan.baidu.com/s/1KZq99I5KaJnM20mSr04sew",target:"_blank",rel:"noopener noreferrer"}},[a._v("资源下载"),v("OutboundLink")],1),a._v("提取码： vv3y")]),a._v(" "),v("h2",{attrs:{id:"课程目录"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#课程目录"}},[a._v("#")]),a._v(" 课程目录：")]),a._v(" "),v("h3",{attrs:{id:"第1章-课程介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第1章-课程介绍"}},[a._v("#")]),a._v(" 第1章 课程介绍")]),a._v(" "),v("p",[a._v("欢迎大家来到深度讲解Go语言的课堂。本课程将从基本语法讲起，逐渐深入，帮助同学深度理解Go语言面向接口，函数式编程，错误处理，测试，并行计算等元素，并带领大家实现一个分布式爬虫的实战项目。")]),a._v(" "),v("ul",[v("li",[a._v("1-1 Google资深工程师深度讲解go语言 试看")]),a._v(" "),v("li",[a._v("1-2 安装与环境")]),a._v(" "),v("li",[a._v("1-3 国内镜像配置")]),a._v(" "),v("li",[a._v("1-4 IntelliJ Idea 的安装和配置")]),a._v(" "),v("li",[a._v("1-5 vscode 的安装和配置")])]),a._v(" "),v("h4",{attrs:{id:"go语言的安装与开发环境"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#go语言的安装与开发环境"}},[a._v("#")]),a._v(" Go语言的安装与开发环境")]),a._v(" "),v("p",[a._v("下载：")]),a._v(" "),v("p",[a._v("国内：http://studygolang.com/dl")]),a._v(" "),v("p",[a._v("https://golang.org/dl/")]),a._v(" "),v("div",{staticClass:"language-shell script line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置国内镜像")]),a._v("\ngo "),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-w")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOPROXY")]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("https://goproxy.cn,direct\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 开启 Go Module")]),a._v("\ngo "),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-w")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GO111MODULE")]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("on\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# goimports")]),a._v("\ngo get "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" golang.org/x/tools/cmd/goimports\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br"),v("span",{staticClass:"line-number"},[a._v("3")]),v("br"),v("span",{staticClass:"line-number"},[a._v("4")]),v("br"),v("span",{staticClass:"line-number"},[a._v("5")]),v("br"),v("span",{staticClass:"line-number"},[a._v("6")]),v("br")])]),v("p",[a._v("开发环境：vi, emacs, idea, eclipse, vs, sublime … + go 插件")]),a._v(" "),v("p",[a._v("IDE：Goland, liteIDE")]),a._v(" "),v("h3",{attrs:{id:"第2章-基础语法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第2章-基础语法"}},[a._v("#")]),a._v(" 第2章 基础语法")]),a._v(" "),v("p",[a._v("量，常量，类型，选择，循环，函数，指针，本章节带领大家学习一门新语言所需的必备语法知识。让大家对Go语言有一个初步的认识！")]),a._v(" "),v("ul",[v("li",[a._v("2-1 变量定义")]),a._v(" "),v("li",[a._v("2-2 内建变量类型")]),a._v(" "),v("li",[a._v("2-3 常量与枚举")]),a._v(" "),v("li",[a._v("2-4 条件语句")]),a._v(" "),v("li",[a._v("2-5 循环")]),a._v(" "),v("li",[a._v("2-6 函数")]),a._v(" "),v("li",[a._v("2-7 指针")])]),a._v(" "),v("blockquote",[v("p",[a._v("Go语言指针不能运算\nGo 语言只有值传递一种方式\n"),v("img",{attrs:{src:"https://i-blog.csdnimg.cn/direct/2e1a3c98ebe8431497eefb54ba8d10f6.png",alt:"在这里插入图片描述"}})])]),a._v(" "),v("h3",{attrs:{id:"第3章-内建容器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第3章-内建容器"}},[a._v("#")]),a._v(" 第3章 内建容器")]),a._v(" "),v("p",[a._v("本章节我们来学习数组，切片，Map和字符串。在Go语言中，我们一般不直接使用数组，而是使用切片来管理线性表结构，它的语法类似python的list，不过更强大哦。当然，Map和字符串的学习也是必不可少。掌握至此，我们就可以写一些简单的算法了，刷刷leetcode不在话下，我们就来试一试。...")]),a._v(" "),v("ul",[v("li",[a._v("3-1 数组")]),a._v(" "),v("li",[a._v("3-2 切片的概念")]),a._v(" "),v("li",[a._v("3-3 切片的操作")]),a._v(" "),v("li",[a._v("3-4 Map")]),a._v(" "),v("li",[a._v("3-5 Map例题")]),a._v(" "),v("li",[a._v("3-6 字符和字符串处理")])]),a._v(" "),v("h3",{attrs:{id:"第4章-面向-对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第4章-面向-对象"}},[a._v("#")]),a._v(" 第4章 面向“对象”")]),a._v(" "),v("p",[a._v("Go语言没有class，只有struct。我们来看看struct如何使用，Go语言给结构体定义类似方法或者成员函数的做法非常有特色。我们还将学习Go语言的包的概念，以及如何封装，如何扩展已有类型等。我们还将学习GOPATH和Go语言项目的目录结构，如何从网上下载依赖包等一系列项目相关的知识。我们将以“树”的结构和遍历作为贯穿本章...")]),a._v(" "),v("ul",[v("li",[a._v("4-1 结构体和方法")]),a._v(" "),v("li",[a._v("4-2 包和封装")]),a._v(" "),v("li",[a._v("4-3 扩展已有类型")]),a._v(" "),v("li",[a._v("4-4 使用内嵌来扩展已有类型")])]),a._v(" "),v("h4",{attrs:{id:"结构体和方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#结构体和方法"}},[a._v("#")]),a._v(" 结构体和方法")]),a._v(" "),v("blockquote",[v("p",[a._v("不论地址还是结构本身，一律使用 . 来访问成员")]),a._v(" "),v("p",[a._v("结构创建在堆上还是栈上？ 不需要知道 自动垃圾回收")]),a._v(" "),v("p",[a._v("可以使用指针作为方法的接收者")]),a._v(" "),v("p",[a._v("只有使用指针才可以改变结构体内容 nil 指针也可以调用方法 值接收者 vs 指针接收者")]),a._v(" "),v("p",[a._v("要改变内容必须使用指针接收者 结构体过大也考虑使用指针接收者（性能考虑） 一致性：如有指针接收者，最好都是指针接收者 值接收者是\ngo语言特有 值/指针接收者的方法都是使用 . 来调用")])]),a._v(" "),v("h3",{attrs:{id:"第5章-go语言的依赖管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第5章-go语言的依赖管理"}},[a._v("#")]),a._v(" 第5章 Go语言的依赖管理")]),a._v(" "),v("p",[a._v("关于Go语言的依赖管理大有可用，只讲核心的，只学有用的，把时间投资在最有价值的学习上。")]),a._v(" "),v("ul",[v("li",[a._v("5-1 依赖管理")]),a._v(" "),v("li",[a._v("5-2 GOPATH 和 GOVENDOR")]),a._v(" "),v("li",[a._v("5-3 go mod的使用")]),a._v(" "),v("li",[a._v("5-4 目录的整理")])]),a._v(" "),v("h4",{attrs:{id:"依赖管理的三个阶段-gopath-govendor-go-mod"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#依赖管理的三个阶段-gopath-govendor-go-mod"}},[a._v("#")]),a._v(" 依赖管理的三个阶段 GOPATH, GOVENDOR, go mod")]),a._v(" "),v("h5",{attrs:{id:"_1-gopath-依赖管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-gopath-依赖管理"}},[a._v("#")]),a._v(" 1. GOPATH 依赖管理")]),a._v(" "),v("ul",[v("li",[a._v("GOPATH 依赖管理是通过设置依赖查找路径，来实现依赖导入。")]),a._v(" "),v("li",[a._v("缺点：1. 所有代码的依赖都放置到同一个地方，当不同项目对相同依赖的版本不一致时，将无法处理; 2. 所有的项目代码需要放置到 GOPATH 目录下的 src 目录中，只有这样代码运行时，才能找到 GOPATH 下的依赖。")])]),a._v(" "),v("div",{staticClass:"language-shell script line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 配置成GOPATH模式")]),a._v("\ngo "),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看配置项")]),a._v("\ngo "),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-w")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GO111MODULE")]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("off   "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 关闭go mod 模式，临时设置 export GO111MODULE=off")]),a._v("\ngo "),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-w")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOPATH")]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/root/go   "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 临时设置 export GOPATH=/root/go ")]),a._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 需要在GOPATH目录下创建 src 文件夹，用于放置自己编写的代码")]),a._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" /root/go/src\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装测试依赖")]),a._v("\ngo get "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" go.uber.org/zap \n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br"),v("span",{staticClass:"line-number"},[a._v("3")]),v("br"),v("span",{staticClass:"line-number"},[a._v("4")]),v("br"),v("span",{staticClass:"line-number"},[a._v("5")]),v("br"),v("span",{staticClass:"line-number"},[a._v("6")]),v("br"),v("span",{staticClass:"line-number"},[a._v("7")]),v("br"),v("span",{staticClass:"line-number"},[a._v("8")]),v("br"),v("span",{staticClass:"line-number"},[a._v("9")]),v("br")])]),v("h5",{attrs:{id:"_2-govendor-依赖管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-govendor-依赖管理"}},[a._v("#")]),a._v(" 2. GOVENDOR 依赖管理")]),a._v(" "),v("ul",[v("li",[a._v("GOVENDOR 依赖管理是通过在当前项目目录下新建 vendor 文件夹，放置本项目使用依赖库，\n代码运行时，优先从 vendor 目录下查找依赖，如果没有找到，就会到 GOPATH 目录下查找依赖库。")]),a._v(" "),v("li",[a._v("缺点：需要用户手动拷贝依赖库到 vender 目录下，自动化操作时需要使用第三方依赖库（如：glide, dep, go dep, ...）")])]),a._v(" "),v("h5",{attrs:{id:"_3-go-mod-依赖管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-go-mod-依赖管理"}},[a._v("#")]),a._v(" 3. go mod 依赖管理")]),a._v(" "),v("ul",[v("li",[a._v("配置系统为 go mod 模式"),v("div",{staticClass:"language-shell script line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[a._v("go "),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-w")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GO111MODULE")]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("on  "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 配置 go mode 模式")]),a._v("\ngo "),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-w")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOPROXY")]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("https://goproxy.cn,direct  "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用国内源")]),a._v("\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br")])])]),a._v(" "),v("li",[a._v("由go命令统一管理，用户不必关心项目所在目录和vendor目录")]),a._v(" "),v("li",[a._v("初始化 go mod: "),v("code",[a._v("go mode init [name], eg: go mode init gomodtest")]),a._v("， 执行命令后将生成 go.mod 文件")]),a._v(" "),v("li",[a._v("安装依赖，在 go.mod 文件所在目录下执行"),v("div",{staticClass:"language-shell script line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[a._v("go get "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" go.uber.org/zap   "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装最新版本")]),a._v("\ngo get go.uber.org/zap@1.11  "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装指定版本")]),a._v("\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br")])])]),a._v(" "),v("li",[a._v("更新依赖后通过整理命令清理旧的依赖记录"),v("div",{staticClass:"language-shell script line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[a._v("go get go.uber.org/zap@1.11   "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装zap@1.11")]),a._v("\ngo get go.uber.org/zap@1.12   "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 更新到zap@1.12")]),a._v("\ngo mod tidy    "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 重新整理依赖记录")]),a._v("\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br"),v("span",{staticClass:"line-number"},[a._v("3")]),v("br")])])]),a._v(" "),v("li",[a._v("将旧项目迁移到go mod:"),v("div",{staticClass:"language-shell script line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[a._v("go mod init "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("mod_name"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 初始化 go.mod 文件")]),a._v("\ngo build ./"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".          "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 将所有项目依赖记录到go.mod中")]),a._v("\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br")])])])]),a._v(" "),v("h3",{attrs:{id:"第6章-面向接口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第6章-面向接口"}},[a._v("#")]),a._v(" 第6章 面向接口")]),a._v(" "),v("p",[a._v("这一章我们从duck typing的概念开始学起，还将探讨其他语言中对duck typing的支持，由此引出接口的概念。我们将深入理解Go语言接口的内部实现以及使用接口实现组合的模式。")]),a._v(" "),v("ul",[v("li",[a._v("6-1 接口的概念")]),a._v(" "),v("li",[a._v("6-2 duck typing的概念 试看")]),a._v(" "),v("li",[a._v("6-3 接口的定义和实现")]),a._v(" "),v("li",[a._v("6-4 接口的值类型")]),a._v(" "),v("li",[a._v("6-5 接口的组合")]),a._v(" "),v("li",[a._v("6-6 常用系统接口")])]),a._v(" "),v("h3",{attrs:{id:"第7章-函数式编程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第7章-函数式编程"}},[a._v("#")]),a._v(" 第7章 函数式编程")]),a._v(" "),v("p",[a._v("在其他通用语言中，函数式编程是“高级”概念，但对于Go语言却非常基本。本章我们将讲解函数式编程的概念并且比较其他语言函数式编程的实现方法。我们将重点理解闭包。这章中我们将采用多样的例题来帮助大家更好的理解闭包，函数作为一等公民等及其常见概念和应用方法。...")]),a._v(" "),v("ul",[v("li",[a._v("7-1 函数式编程")]),a._v(" "),v("li",[a._v("7-2 函数式编程例一")]),a._v(" "),v("li",[a._v("7-3 函数式编程例二")])]),a._v(" "),v("h3",{attrs:{id:"第8章-错误处理和资源管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第8章-错误处理和资源管理"}},[a._v("#")]),a._v(" 第8章 错误处理和资源管理")]),a._v(" "),v("p",[a._v("这将是本课程最“无聊”的一章，但却是区分出优秀软件工程师的关键能力。Go语言独特的defer/panic/recover，以及错误机制，在社区有着广泛的争论。我们来深入理解Go语言的错误处理机制，看看Go语言如何区分错误以及异常。最后，我们实现一个Web应用微型项目，采用商业服务的错误处理思路，结合函数式编程，来演示Go语言错误...")]),a._v(" "),v("ul",[v("li",[a._v("8-1 defer调用")]),a._v(" "),v("li",[a._v("8-2 错误处理概念")]),a._v(" "),v("li",[a._v("8-3 服务器统一出错处理")]),a._v(" "),v("li",[a._v("8-4 panic和recover")]),a._v(" "),v("li",[a._v("8-5 服务器统一出错处理2")])]),a._v(" "),v("h3",{attrs:{id:"第9章-测试与性能调优"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第9章-测试与性能调优"}},[a._v("#")]),a._v(" 第9章 测试与性能调优")]),a._v(" "),v("p",[a._v("Go语言的测试不同于其他如junit，Go语言采用“表格驱动测试”的理念。我们将学习和体会这样的理念，并用Go语言的测试支持库来实践表格驱动测试，并做代码覆盖和性能检测，通过內建的性能调优工具来优化我们之前的算法。最后演示了对http服务器的多种粒度的测试。...")]),a._v(" "),v("ul",[v("li",[a._v("9-1 测试")]),a._v(" "),v("li",[a._v("9-2 代码覆盖率和性能测试")]),a._v(" "),v("li",[a._v("9-3 使用pprof进行性能调优")]),a._v(" "),v("li",[a._v("9-4 测试http服务器（上）")]),a._v(" "),v("li",[a._v("9-5 测试http服务器（下）")]),a._v(" "),v("li",[a._v("9-6 生成文档和示例代码")]),a._v(" "),v("li",[a._v("9-7 测试总结")])]),a._v(" "),v("h3",{attrs:{id:"第10章-goroutine"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第10章-goroutine"}},[a._v("#")]),a._v(" 第10章 Goroutine")]),a._v(" "),v("p",[a._v("这一章开始我们进入并发编程。我们讲解Goroutine，协程的概念，以及背后的Go语言调度器。")]),a._v(" "),v("ul",[v("li",[a._v("10-1 goroutine")]),a._v(" "),v("li",[a._v("10-2 go语言的调度器")])]),a._v(" "),v("h3",{attrs:{id:"第11章-channel"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第11章-channel"}},[a._v("#")]),a._v(" 第11章 Channel")]),a._v(" "),v("p",[a._v("Channel是Goroutine之间通信的桥梁，它和函数一样是一等公民。在介绍完Channel的语法及运行方式后，我们将采用数个例题来演示Go语言并发编程中最常见的任务极其解决模式。")]),a._v(" "),v("ul",[v("li",[a._v("11-1 channel")]),a._v(" "),v("li",[a._v("11-2 使用Channel等待任务结束")]),a._v(" "),v("li",[a._v("11-3 使用Channel进行树的遍历")]),a._v(" "),v("li",[a._v("11-4 用select进行调度")]),a._v(" "),v("li",[a._v("11-5 传统同步机制")]),a._v(" "),v("li",[a._v("11-6 sync包的使用")])]),a._v(" "),v("h4",{attrs:{id:"sync包的使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sync包的使用"}},[a._v("#")]),a._v(" sync包的使用")]),a._v(" "),v("blockquote",[v("ul",[v("li",[a._v("Mutex   互斥锁\n"),v("ol",[v("li",[a._v("Lock()")]),a._v(" "),v("li",[a._v("UnLock()")])])]),a._v(" "),v("li",[a._v("RWMutex 读写互斥锁\n"),v("ol",[v("li",[a._v("Lock()      写的时候，排斥其他的写锁和读锁")]),a._v(" "),v("li",[a._v("UnLock()    释放写锁")]),a._v(" "),v("li",[a._v("Rlock()     在读取的时候 不会阻塞其他的读锁，但是会排斥写锁 Lock()")]),a._v(" "),v("li",[a._v("RUnlock()   释放读锁")])])]),a._v(" "),v("li",[a._v("Once    Once.Do(一个函数) 这个方法无论被调用多少次，只会执行一次")]),a._v(" "),v("li",[a._v("WaitGroup\n"),v("ol",[v("li",[a._v("Add(delta int) 设定需要Done多少次")]),a._v(" "),v("li",[a._v("Done() 没执行一次加1")]),a._v(" "),v("li",[a._v("Wait() 阻塞到 执行Done() 的次数 和 Add(delta int)的delta次数相同\n示例代码详见 chapter_11/02_channel_done/channelWaitGroup_2")])])]),a._v(" "),v("li",[a._v("Map 一个并发字典, 可并发读写\n"),v("ol",[v("li",[a._v("Store(key, val)              写入字典中数据")]),a._v(" "),v("li",[a._v("Load(key)                    读取字段中数据")]),a._v(" "),v("li",[a._v("LoadOrStore(key, defaultVal) 读不到设置key默认值defaultVal")]),a._v(" "),v("li",[a._v("Range(func(key, value interface{}) bool {})"),v("br"),a._v("\n传入一个函数，遍历字典（函数每返回true, 开始遍历下一个元素，返回false终止遍历）")]),a._v(" "),v("li",[a._v("Delete(key)                  删除字典中key")])])]),a._v(" "),v("li",[a._v("Pool 并发池  通过Put 将数据丢到Pool中，然后Get() 但是没有顺序，可以用完再丢回去\n"),v("ol",[v("li",[a._v("Put")]),a._v(" "),v("li",[a._v("Get")])])]),a._v(" "),v("li",[a._v("Cond 通知锁\n"),v("ol",[v("li",[a._v("NewCond(lock)    创建一个Cond")]),a._v(" "),v("li",[a._v("cond.L.Lock() ~ cond.L.Unlock()  创建一个锁区间 在区域内部可以cond.Wait()")]),a._v(" "),v("li",[a._v("cond.Wait()      在锁区间内部可以cond.Wait()")]),a._v(" "),v("li",[a._v("cond.Broadcast() 全部释放cond.Wait()")]),a._v(" "),v("li",[a._v("cond.Signal()    解锁一个cond.Wait()")])])])])]),a._v(" "),v("h3",{attrs:{id:"第12章-迷宫的广度优先搜索"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第12章-迷宫的广度优先搜索"}},[a._v("#")]),a._v(" 第12章 迷宫的广度优先搜索")]),a._v(" "),v("p",[a._v("这章我们将综合运用学过的知识实现一个广度优先算法来解迷宫，为接下来的实战项目做好技术和算法上的准备。广度优先算法不仅是面试和工作中常用的技术，而且实现上相比大部分其它算法更为复杂，是检验是否熟练掌握一门语言的经典例题。让我们来试一试吧。...")]),a._v(" "),v("ul",[v("li",[a._v("12-1 迷宫_算法")]),a._v(" "),v("li",[a._v("12-2 迷宫代码实现")])]),a._v(" "),v("h3",{attrs:{id:"第13章-http及其他标准库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第13章-http及其他标准库"}},[a._v("#")]),a._v(" 第13章 http及其他标准库")]),a._v(" "),v("p",[a._v("这里我们简要介绍一下Go语言中非常重要而且封装良好的http标准库，回顾并实现http客户端和服务器。我们还介绍了Go语言中其他的标准库。")]),a._v(" "),v("ul",[v("li",[a._v("13-1 http标准库")]),a._v(" "),v("li",[a._v("13-2 其它标准库")]),a._v(" "),v("li",[a._v("13-3 gin 框架介绍")]),a._v(" "),v("li",[a._v("13-4 为gin增加middleware")])]),a._v(" "),v("h3",{attrs:{id:"第14章-开始实战项目"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第14章-开始实战项目"}},[a._v("#")]),a._v(" 第14章 开始实战项目")]),a._v(" "),v("p",[a._v("至此为止，恭喜同学完成了这门课Go语言部分的学习。接下来我们来进入实战项目。本章将介绍项目的具体内容，课题的选择，技术选型，总体架构，以及实现步骤。")]),a._v(" "),v("ul",[v("li",[a._v("14-1 爬虫项目介绍")]),a._v(" "),v("li",[a._v("14-2 爬虫的法律风险")]),a._v(" "),v("li",[a._v("14-3 新爬虫的选择")]),a._v(" "),v("li",[a._v("14-4 总体算法")]),a._v(" "),v("li",[a._v("14-5 模拟相亲网站上线啦！")])]),a._v(" "),v("h3",{attrs:{id:"第15章-单任务版爬虫"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第15章-单任务版爬虫"}},[a._v("#")]),a._v(" 第15章 单任务版爬虫")]),a._v(" "),v("p",[a._v("在考虑性能之前我们首先应该考虑正确性。单任务版爬虫确保我们能够正确爬取我们所需的信息。我们应用了之前练习的广度优先算法，抽象出Parser和Fetcher，学习正则表达式，成功实现并运行单任务版爬虫。")]),a._v(" "),v("ul",[v("li",[a._v("15-1 获得初始页面内容")]),a._v(" "),v("li",[a._v("15-2 正则表达式")]),a._v(" "),v("li",[a._v("15-3 提取城市和url")]),a._v(" "),v("li",[a._v("15-4 单任务版爬虫的架构")]),a._v(" "),v("li",[a._v("15-5 Engine 与 Parser")]),a._v(" "),v("li",[a._v("15-6 测试CityListParser")]),a._v(" "),v("li",[a._v("15-7 城市解析器")]),a._v(" "),v("li",[a._v("15-8 用户信息解析器（上）")]),a._v(" "),v("li",[a._v("15-9 用户信息解析器（下）")]),a._v(" "),v("li",[a._v("15-10 单任务版爬虫性能")])]),a._v(" "),v("h3",{attrs:{id:"第16章-并发版爬虫"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第16章-并发版爬虫"}},[a._v("#")]),a._v(" 第16章 并发版爬虫")]),a._v(" "),v("p",[a._v("为了提升爬虫性能，我们抽象出Worker的概念，并添加调度器，实现并发版爬虫。我们应用接口的概念，完成了由简至复杂的多个调度器的实现。同学可以在实战项目中更真实的体会并学习Go语言并发编程的多种模式。")]),a._v(" "),v("ul",[v("li",[a._v("16-1 并发版爬虫架构")]),a._v(" "),v("li",[a._v("16-2 简单调度器")]),a._v(" "),v("li",[a._v("16-3 并发调度器")]),a._v(" "),v("li",[a._v("16-4 队列实现调度器")]),a._v(" "),v("li",[a._v("16-5 重构和总结")]),a._v(" "),v("li",[a._v("16-6 更多城市")]),a._v(" "),v("li",[a._v("16-7 更多用户与去重")])]),a._v(" "),v("h3",{attrs:{id:"第17章-数据存储和展示"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第17章-数据存储和展示"}},[a._v("#")]),a._v(" 第17章 数据存储和展示")]),a._v(" "),v("p",[a._v("是时候检验我们项目的成果了。我们将采用Docker+ElasticSearch来存储我们爬取的信息。在简单了解Docker和ElasticSearch后，我们将使用ElasticSearch的Go语言客户端将爬取数据写入。之后我们使用Go语言的模板引擎迅速实现前端网页展示。至此，我们已经可以尝试自己喜欢的搜索条件去查看数据啦。...")]),a._v(" "),v("ul",[v("li",[a._v("17-1 ItemSaver的架构")]),a._v(" "),v("li",[a._v("17-2 Docker和ElasticSearch介绍")]),a._v(" "),v("li",[a._v("17-3 Docker的安装和使用")]),a._v(" "),v("li",[a._v("17-4 ElasticSearch入门")]),a._v(" "),v("li",[a._v("17-5 向ElasticSearch存储数据")]),a._v(" "),v("li",[a._v("17-6 完整爬虫的运行与数据存储")]),a._v(" "),v("li",[a._v("17-7 添加URL与ID")]),a._v(" "),v("li",[a._v("17-8 重构与运行")]),a._v(" "),v("li",[a._v("17-9 标准模板库介绍")]),a._v(" "),v("li",[a._v("17-10 实现前端展示页面")]),a._v(" "),v("li",[a._v("17-11 完善前端展示")])]),a._v(" "),v("h3",{attrs:{id:"第18章-分布式爬虫"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第18章-分布式爬虫"}},[a._v("#")]),a._v(" 第18章 分布式爬虫")]),a._v(" "),v("p",[a._v("本章在简要介绍分布式概念后，将我们的并发爬虫改写成分布式。我们在很少改动的情况下，加入jsonrpc客户/服务端，实现并部署分布式爬虫。最后探讨实战项目的更多改进方案。")]),a._v(" "),v("ul",[v("li",[a._v("18-1 分布式系统简介")]),a._v(" "),v("li",[a._v("18-2 分布式爬虫架构")]),a._v(" "),v("li",[a._v("18-3 jsonrpc的使用")]),a._v(" "),v("li",[a._v("18-4 ItemSaver服务")]),a._v(" "),v("li",[a._v("18-5 整合ItemSaver服务")]),a._v(" "),v("li",[a._v("18-6 解析器的序列化")]),a._v(" "),v("li",[a._v("18-7 实现爬虫服务")]),a._v(" "),v("li",[a._v("18-8 完整分布式爬虫的运行")]),a._v(" "),v("li",[a._v("18-9 使用连接池链接爬虫集群")]),a._v(" "),v("li",[a._v("18-10 实战项目总结")]),a._v(" "),v("li",[a._v("18-11 进一步的工作")])]),a._v(" "),v("h3",{attrs:{id:"第19章-课程总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第19章-课程总结"}},[a._v("#")]),a._v(" 第19章 课程总结")]),a._v(" "),v("p",[a._v("感谢同学们学到这里，恭喜同学们给自己的技术栈加上了非常重要的Go语言技能。希望同学们带着这门课上学到的知识，更好的参与到项目中去，共同推动Go语言的发展。")]),a._v(" "),v("ul",[v("li",[a._v("19-1 体会Go语言的设计")]),a._v(" "),v("li",[a._v("19-2 课程总结")])])])}),[],!1,null,null,null);v.default=_.exports}}]);